La clase es una funci칩n especial que facilita la creaci칩n de objeto con funciones heredadas.

function crear usuario () {

Para escribirlo con funci칩n.

function Usuario (opciones){
this.usuario = opciones.usuario;
this.nombre = opciones.nombre;
this.email = opciones.email;
this.password = opciones.password;
}
 usuario.prototype.saludar = function (){return "Hola, mi nombre es " + this.nombre}
return Usuario;

Para escribirlo con class

class usuario {
 constructor (opciones)
this.usuario = opciones.usuario;
this.nombre = opciones.nombre;
this.email = opciones.email;
this.password = opciones.password;
this.saludar = function () {return "Hola, mi nombre es " + this.nombre}
}
return usuario

function agregarmetodoprototype (constructor) {

Constructor.prototype.saludar = function () {return "Hello World!" }

function agregarstringinvertida (){
 
 String.prototype.reverse = function (){ 
 var cadena = "";
 for (var i = 0, this.length - 1; i >=0; i--;){ // SE LE AGREGA EL MENOS UNO PORQUE TODOS SUS STRINGS INICIAN EN 0
// SE AGREGA EL i-- PARA QUE HAGA EL RECORRIDO DEL STRING desde el final hasta el inicio, se conoce como decremento
// VER SI PUEDES HACER MAS SENCILLO EL ARREGLO DEL BUCLE  FOR
 cadena = cadena + this[i]
}
 return cadena;
}

class Persona {
   constructor (nombre, apellido, edad, domicilio) {
 this.nombre = nombre;
 this.apellido = apellido;
 this.edad = edad;
 this.domicilio = domicilio;
 this.detalle = function () { return {
 nombre: this.nombre,
 apellido: this.apellido,
 edad: this.edad,
 domicilio: this.domicilio,
}

}

// VER SI SE PUEDE CORRER CON return Persona

function crear instanciaPersona (nombre, apellido, edad, dir) {
 
 const persona = new Persona (nombre, apellido, edad, dir); 
 return pesona 


function agregarMetodo () {
 
 Persona.prototype.datos = function () {
 return this.nombre + ", " + this.edad + " a침os";
}
 